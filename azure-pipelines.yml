# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - '*'     # this means build all branches when pushed to Remote

  paths:
    exclude:
     - docs/* # this excludes the doc folder update  

# creating different stages in the pipeline
# first stage is build
# next stage is deploy app to Azure app service

variables:
  buildConfiguration: 'Release'
  buildProjectPackageName: 'Tailspin.SpaceGame.Web'
  releaseBranchName: 'release'

schedules:
- cron: '0 3 * * *'
  displayName: 'Deploy every day at 3 A.M.'
  branches:
    include:
    - release
  always: false 

stages:
  - stage: 'Build' 
    displayName: 'Build the web application'
    jobs:
      - job: 'Build'
        displayName: 'Build job'
        pool:
          vmImage: ubuntu-latest
          demands: 
            - npm

        variables:
          wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
          dotnetSdkVersion: '5.x'

        # build steps are defined
        steps: 
        - task: UseDotNet@2
          displayName: 'Use .NET SDK $(dotnetSdkVersion)'
          inputs:
            packageType: sdk
            version: '$(dotnetSdkVersion)'

        - task: NuGetToolInstaller@0
          inputs:
            versionSpec: '5.9.1'

        - task: Npm@1
          displayName: 'Run npm install'
          inputs:
            verbose: false

        - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
          displayName: 'Compile Sass assets'

        - task: gulp@1
          displayName: 'Run gulp tasks'

        - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
          displayName: 'Write build info'
          workingDirectory: $(wwwrootDir)

        # get Artifacts from azure artifacts
        - task: NuGetCommand@2
          displayName: 'Restore project dependencies'
          inputs:
            command: 'restore'
            restoreSolution: '**/*.sln'
            feedsToUse: 'select'
            vstsFeed: '$(System.TeamProject)/Tailspin.SpaceGame.Web.Models'

        - template: templates/build.yml
          parameters:
            buildConfiguration: 'Release'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: drop'
          condition: succeeded()

  - stage: 'Dev'
    displayName: 'Deploy app to Dev'
    dependsOn: Build
    condition: |
      and
      (
        succeeded(),
        eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
      )
    jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-20.04'
      environment: dev
      variables:
      - group: 'tailspin web app variable group - dev'
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: Dev website'
              inputs:
                azureSubscription: 'Resource Manager - Tailspin - Space Game'
                appName: '$(WebAppNameDev)'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/$(buildProjectPackageName).zip'

  - stage: 'Test'
    displayName: 'Deploy to the test environment'
    dependsOn: Dev
    #condition: eq(variables['Build.Reason'], 'Schedule')
    jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-20.04'
      environment: test
      variables:
      - group: 'tailspin web app variable group - test'
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: 'Resource Manager - Tailspin - Space Game'
                appName: '$(WebAppNameTest)'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/$(buildProjectPackageName).zip'

  - stage: 'Staging'
    displayName: 'Deploy to the Staging environment'
    dependsOn: Test
    #condition: eq(variables['Build.Reason'], 'Schedule')
    jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-20.04'
      environment: staging
      variables:
      - group: 'tailspin web app variable group - staging'
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: 'Resource Manager - Tailspin - Space Game'
                appName: '$(WebAppNameStaging)'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/$(buildProjectPackageName).zip'